{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","funcResult","uncertResult","useState","mesurables","setMesurables","nameValid","setNameValid","valValid","setValValid","deltaValid","setDeltaValid","nameInput","setNameInput","valInput","setValInput","deltaInput","setDeltaInput","funcValid","setFuncValid","math","funcInput","setFuncInput","uncertFunc","setUncertFunc","mesurablesToObj","mes","obj","forEach","name","value","evaluate","className","TextField","error","id","label","defaultValue","style","marginRight","onChange","event","conflict","find","currentTarget","length","val","Number","parseFloat","isNaN","Button","variant","color","onClick","display","flexDirection","flexWrap","map","index","key","varName","varUncertainty","varValue","Chip","onDelete","undefined","filter","_","avatar","Avatar","func","e","console","href","sym","partial","toString","partials","uncert","join","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5eab28f4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/chip\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport * as math from \"mathjs\";\n\nfunction App() {\n  const [mesurables, setMesurables] = useState<Array<[string, number, number]>>(\n    []\n  );\n  const [nameValid, setNameValid] = useState<Boolean>(true);\n  const [valValid, setValValid] = useState<Boolean>(true);\n  const [deltaValid, setDeltaValid] = useState<Boolean>(true);\n  const [nameInput, setNameInput] = useState<string>(\"x\");\n  const [valInput, setValInput] = useState<number>(0);\n  const [deltaInput, setDeltaInput] = useState<number>(0.01);\n  const [funcValid, setFuncValid] = useState<Boolean>(true);\n  const [funcInput, setFuncInput] = useState<math.MathNode | undefined>(\n    math.parse(\"x^2\")\n  );\n  const [uncertFunc, setUncertFunc] = useState<math.MathNode | undefined>();\n\n  const mesurablesToObj = (mes: Array<[string, number, number]>): any => {\n    let obj: any = {};\n    mes.forEach(([name, _, value]) => {\n      obj[name] = value;\n    });\n    return obj;\n  };\n\n  const handleValidateName = (event: any) => {\n    let conflict = mesurables.find(\n      ([name]) => name === event.currentTarget.value\n    );\n    if (event.currentTarget.value.length === 1 && !conflict) {\n      setNameValid(true);\n      setNameInput(event.currentTarget.value);\n    } else {\n      setNameValid(false);\n    }\n  };\n  const handleValidateDelta = (event: any) => {\n    let val = Number.parseFloat(event.currentTarget.value);\n    if (!Number.isNaN(val)) {\n      setDeltaValid(true);\n      setDeltaInput(val);\n    } else {\n      setDeltaValid(false);\n    }\n  };\n  const handleValidateVal = (event: any) => {\n    let val = Number.parseFloat(event.currentTarget.value);\n    if (!Number.isNaN(val)) {\n      setValValid(true);\n      setValInput(val);\n    } else {\n      setValValid(false);\n    }\n  };\n  const handleAddVar = (event: any) => {\n    let conflict = mesurables.find(([name]) => name === nameInput);\n    if (valValid && nameValid && deltaValid && !conflict) {\n      setMesurables([...mesurables, [nameInput, deltaInput, valInput]]);\n      setNameValid(false);\n    }\n  };\n  const handleDelete = (key: number) => (event: any) => {\n    setUncertFunc(undefined);\n    setMesurables(mesurables.filter((_, index) => index !== key));\n  };\n\n  const handleFunctionValidate = (event: any) => {\n    try {\n      let func = math.parse(event.currentTarget.value);\n      setFuncValid(true);\n      setFuncInput(func);\n    } catch (e) {\n      console.error(e);\n      setFuncInput(undefined);\n      setFuncValid(false);\n    }\n  };\n\n  const evaluateUncertainty = (event: any) => {\n    if (funcInput) {\n      if (mesurables.length === 0) {\n        setUncertFunc(math.parse(\"0\"));\n      } else if (mesurables.length <= 1) {\n        let sym = mesurables[0][0];\n        let partial = math.parse(\n          `${mesurables[0][1]} * (${math\n            .derivative(funcInput, sym)\n            .toString()})`\n        );\n        setUncertFunc(partial);\n      } else {\n        let partials = mesurables\n          .map(\n            ([sym, uncert]) =>\n              `(${uncert} * (${math.derivative(funcInput, sym).toString()}))^2`\n          )\n          .join(\" + \");\n        setUncertFunc(math.parse(`sqrt(${partials})`));\n      }\n    } else {\n      setUncertFunc(undefined);\n    }\n  };\n\n  let funcResult;\n  let uncertResult;\n  try {\n    funcResult = funcInput?.evaluate(mesurablesToObj(mesurables));\n  } catch {\n    funcResult = \"Error\";\n  }\n  try {\n    uncertResult = uncertFunc?.evaluate(mesurablesToObj(mesurables));\n  } catch {\n    uncertResult = \"Error\";\n  }\n  return (\n    <div className=\"App\">\n      <h1>Mesurable Uncertainty Calculator</h1>\n\n      <form>\n        <h2>Mesurables</h2>\n        <TextField\n          error={nameValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Variable Symbol\"\n          defaultValue=\"x\"\n          style={{ marginRight: \"10px\" }}\n          onChange={handleValidateName}\n        />\n        <TextField\n          error={valValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Variable Value\"\n          defaultValue=\"0\"\n          style={{ marginRight: \"10px\" }}\n          onChange={handleValidateVal}\n        />\n        <TextField\n          error={deltaValid ? false : true}\n          id=\"standard-basic\"\n          label={<>Variable &delta;</>}\n          defaultValue=\"0.01\"\n          onChange={handleValidateDelta}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleAddVar}>\n          Add Variable\n        </Button>\n        <br />\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\"\n          }}\n        >\n          {mesurables.map(([varName, varUncertainty, varValue], index) => (\n            <Chip\n              key={index}\n              color=\"primary\"\n              label={\n                <>\n                  value = {varValue}; &delta; = {varUncertainty}\n                </>\n              }\n              onDelete={handleDelete(index)}\n              avatar={<Avatar>{varName}</Avatar>}\n              style={{ marginRight: \"2px\" }}\n            />\n          ))}\n        </div>\n      </form>\n\n      <form>\n        <h2>Function</h2>\n        <TextField\n          error={funcValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Function Expression\"\n          defaultValue=\"x^2\"\n          onChange={handleFunctionValidate}\n        />\n        <br />\n        <small>\n          uses the math.js{\" \"}\n          <a href=\"https://mathjs.org/docs/expressions/syntax.html\">syntax</a>\n        </small>\n      </form>\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={evaluateUncertainty}>\n        Evaluate Uncertainty\n      </Button>\n      <br />\n      {uncertFunc ? (\n        <h3>\n          Uncertainty Function:{\" \"}\n          {`f(${mesurables.map(([name, _]) => name).join(\",\")}) = `}\n          {uncertFunc.toString()}\n        </h3>\n      ) : null}\n      {uncertFunc && funcInput ? <h3>Value: {funcResult}</h3> : null}\n      {uncertFunc ? <h3>Uncertainty: {uncertResult}</h3> : null}\n      {uncertFunc && funcInput ? (\n        <h3>\n          Result: {funcResult}&plusmn;\n          {uncertResult}\n        </h3>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}