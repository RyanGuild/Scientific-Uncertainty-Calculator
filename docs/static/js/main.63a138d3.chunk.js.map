{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","mesurables","setMesurables","nameValid","setNameValid","valValid","setValValid","nameInput","setNameInput","valInput","setValInput","funcValid","setFuncValid","math","funcInput","setFuncInput","uncertFunc","setUncertFunc","className","TextField","error","id","label","defaultValue","style","marginRight","onChange","event","conflict","find","name","currentTarget","value","length","val","Number","parseFloat","isNaN","Button","variant","color","onClick","display","flexDirection","flexWrap","map","index","key","varName","varUncertainty","Chip","onDelete","filter","_","avatar","Avatar","func","e","console","undefined","href","sym","partial","partials","mes","toString","join","evaluate","obj","forEach","mesurablesToObj","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63a138d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/chip\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport * as math from \"mathjs\";\n\nfunction App() {\n  const [mesurables, setMesurables] = useState<Array<[string, number]>>([]);\n  const [nameValid, setNameValid] = useState<Boolean>(true);\n  const [valValid, setValValid] = useState<Boolean>(true);\n  const [nameInput, setNameInput] = useState<string>(\"x\");\n  const [valInput, setValInput] = useState<number>(0.01);\n  const [funcValid, setFuncValid] = useState<Boolean>(true);\n  const [funcInput, setFuncInput] = useState<math.MathNode | undefined>(\n    math.parse(\"x^2\")\n  );\n  const [uncertFunc, setUncertFunc] = useState<math.MathNode | undefined>();\n\n  const mesurablesToObj = (mes: Array<[string, number]>): any => {\n    let obj: any = {};\n    mes.forEach(([name, value]) => {\n      obj[name] = value;\n    });\n    return obj;\n  };\n\n  const handleValidateName = (event: any) => {\n    let conflict = mesurables.find(\n      ([name, val]) => name === event.currentTarget.value\n    );\n    if (event.currentTarget.value.length === 1 && !conflict) {\n      setNameValid(true);\n      setNameInput(event.currentTarget.value);\n    } else {\n      setNameValid(false);\n    }\n  };\n  const handleValidateVal = (event: any) => {\n    let val = Number.parseFloat(event.currentTarget.value);\n    if (!Number.isNaN(val)) {\n      setValValid(true);\n      setValInput(val);\n    } else {\n      setValValid(false);\n    }\n  };\n  const handleAddVar = (event: any) => {\n    let conflict = mesurables.find(([name, val]) => name === nameInput);\n    if (valValid && nameValid && !conflict) {\n      setMesurables([...mesurables, [nameInput, valInput]]);\n      setNameValid(false);\n    }\n  };\n  const handleDelete = (key: number) => (event: any) => {\n    setMesurables(mesurables.filter((_, index) => index !== key));\n  };\n\n  const handleFunctionValidate = (event: any) => {\n    try {\n      let func = math.parse(event.currentTarget.value);\n      setFuncValid(true);\n      setFuncInput(func);\n    } catch (e) {\n      console.error(e);\n      setFuncInput(undefined);\n      setFuncValid(false);\n    }\n  };\n\n  const evaluateUncertainty = (event: any) => {\n    if (funcInput) {\n      if (mesurables.length === 0) {\n        setUncertFunc(math.parse(\"0\"));\n      } else if (mesurables.length <= 1) {\n        let sym = mesurables[0][0];\n        let partial = math.derivative(funcInput, sym);\n        setUncertFunc(partial);\n      } else {\n        let syms = mesurables.map(mes => mes[0]);\n        let partials = syms\n          .map(sym => `(${math.derivative(funcInput, sym).toString()})^2`)\n          .join(\" + \");\n        setUncertFunc(math.parse(`sqrt(${partials})`));\n      }\n    } else {\n      setUncertFunc(undefined);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <h1>Mesurable Uncertainty Calculator</h1>\n\n      <form>\n        <h2>Mesurables</h2>\n        <TextField\n          error={nameValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Var Symbol\"\n          defaultValue=\"x\"\n          style={{ marginRight: \"10px\" }}\n          onChange={handleValidateName}\n        />\n        <TextField\n          error={valValid ? false : true}\n          id=\"standard-basic\"\n          label={<>Var &Delta;</>}\n          defaultValue=\"0.01\"\n          onChange={handleValidateVal}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleAddVar}>\n          Add Var\n        </Button>\n        <br />\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\"\n          }}\n        >\n          {mesurables.map(([varName, varUncertainty], index) => (\n            <Chip\n              key={index}\n              color=\"primary\"\n              label={<>&Delta; = {varUncertainty}</>}\n              onDelete={handleDelete(index)}\n              avatar={<Avatar>{varName}</Avatar>}\n              style={{ marginRight: \"2px\" }}\n            />\n          ))}\n        </div>\n      </form>\n\n      <form>\n        <h2>Function</h2>\n        <TextField\n          error={funcValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Function Expression\"\n          defaultValue=\"x^2\"\n          onChange={handleFunctionValidate}\n        />\n        <br />\n        <small>\n          uses the math.js{\" \"}\n          <a href=\"https://mathjs.org/docs/expressions/syntax.html\">syntax</a>\n        </small>\n      </form>\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={evaluateUncertainty}>\n        Evaluate Uncertainty\n      </Button>\n      <br />\n      {uncertFunc ? (\n        <h3>\n          Uncertainty Function:{\" \"}\n          {`f(${mesurables.map(([name, _]) => name).join(\",\")}) = `}\n          {uncertFunc.toString()}\n        </h3>\n      ) : null}\n      {uncertFunc ? (\n        <h3>\n          Uncertainty Value: {uncertFunc.evaluate(mesurablesToObj(mesurables))}\n        </h3>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}