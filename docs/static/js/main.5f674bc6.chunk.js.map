{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","mesurables","setMesurables","nameValid","setNameValid","valValid","setValValid","deltaValid","setDeltaValid","nameInput","setNameInput","valInput","setValInput","deltaInput","setDeltaInput","funcValid","setFuncValid","math","funcInput","setFuncInput","uncertFunc","setUncertFunc","mesurablesToObj","mes","obj","forEach","name","value","className","TextField","error","id","label","defaultValue","style","marginRight","onChange","event","conflict","find","currentTarget","length","val","Number","parseFloat","isNaN","Button","variant","color","onClick","display","flexDirection","flexWrap","map","index","key","varName","varUncertainty","varValue","Chip","onDelete","filter","_","avatar","Avatar","func","e","console","undefined","href","sym","partial","toString","partials","uncert","join","evaluate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f674bc6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/chip\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport * as math from \"mathjs\";\n\nfunction App() {\n  const [mesurables, setMesurables] = useState<Array<[string, number, number]>>(\n    []\n  );\n  const [nameValid, setNameValid] = useState<Boolean>(true);\n  const [valValid, setValValid] = useState<Boolean>(true);\n  const [deltaValid, setDeltaValid] = useState<Boolean>(true);\n  const [nameInput, setNameInput] = useState<string>(\"x\");\n  const [valInput, setValInput] = useState<number>(0);\n  const [deltaInput, setDeltaInput] = useState<number>(0.01);\n  const [funcValid, setFuncValid] = useState<Boolean>(true);\n  const [funcInput, setFuncInput] = useState<math.MathNode | undefined>(\n    math.parse(\"x^2\")\n  );\n  const [uncertFunc, setUncertFunc] = useState<math.MathNode | undefined>();\n\n  const mesurablesToObj = (mes: Array<[string, number, number]>): any => {\n    let obj: any = {};\n    mes.forEach(([name, _, value]) => {\n      obj[name] = value;\n    });\n    return obj;\n  };\n\n  const handleValidateName = (event: any) => {\n    let conflict = mesurables.find(\n      ([name]) => name === event.currentTarget.value\n    );\n    if (event.currentTarget.value.length === 1 && !conflict) {\n      setNameValid(true);\n      setNameInput(event.currentTarget.value);\n    } else {\n      setNameValid(false);\n    }\n  };\n  const handleValidateDelta = (event: any) => {\n    let val = Number.parseFloat(event.currentTarget.value);\n    if (!Number.isNaN(val)) {\n      setDeltaValid(true);\n      setDeltaInput(val);\n    } else {\n      setDeltaValid(false);\n    }\n  };\n  const handleValidateVal = (event: any) => {\n    let val = Number.parseFloat(event.currentTarget.value);\n    if (!Number.isNaN(val)) {\n      setValValid(true);\n      setValInput(val);\n    } else {\n      setValValid(false);\n    }\n  };\n  const handleAddVar = (event: any) => {\n    let conflict = mesurables.find(([name]) => name === nameInput);\n    if (valValid && nameValid && deltaValid && !conflict) {\n      setMesurables([...mesurables, [nameInput, deltaInput, valInput]]);\n      setNameValid(false);\n    }\n  };\n  const handleDelete = (key: number) => (event: any) => {\n    setMesurables(mesurables.filter((_, index) => index !== key));\n  };\n\n  const handleFunctionValidate = (event: any) => {\n    try {\n      let func = math.parse(event.currentTarget.value);\n      setFuncValid(true);\n      setFuncInput(func);\n    } catch (e) {\n      console.error(e);\n      setFuncInput(undefined);\n      setFuncValid(false);\n    }\n  };\n\n  const evaluateUncertainty = (event: any) => {\n    if (funcInput) {\n      if (mesurables.length === 0) {\n        setUncertFunc(math.parse(\"0\"));\n      } else if (mesurables.length <= 1) {\n        let sym = mesurables[0][0];\n        let partial = math.parse(\n          `${mesurables[0][1]} * ${math.derivative(funcInput, sym).toString()}`\n        );\n        setUncertFunc(partial);\n      } else {\n        let partials = mesurables\n          .map(\n            ([sym, uncert]) =>\n              `(${uncert} * ${math.derivative(funcInput, sym).toString()})^2`\n          )\n          .join(\" + \");\n        setUncertFunc(math.parse(`sqrt(${partials})`));\n      }\n    } else {\n      setUncertFunc(undefined);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <h1>Mesurable Uncertainty Calculator</h1>\n\n      <form>\n        <h2>Mesurables</h2>\n        <TextField\n          error={nameValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Variable Symbol\"\n          defaultValue=\"x\"\n          style={{ marginRight: \"10px\" }}\n          onChange={handleValidateName}\n        />\n        <TextField\n          error={valValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Variable Value\"\n          defaultValue=\"0\"\n          style={{ marginRight: \"10px\" }}\n          onChange={handleValidateVal}\n        />\n        <TextField\n          error={deltaValid ? false : true}\n          id=\"standard-basic\"\n          label={<>Variable &delta;</>}\n          defaultValue=\"0.01\"\n          onChange={handleValidateDelta}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleAddVar}>\n          Add Variable\n        </Button>\n        <br />\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\"\n          }}\n        >\n          {mesurables.map(([varName, varUncertainty, varValue], index) => (\n            <Chip\n              key={index}\n              color=\"primary\"\n              label={\n                <>\n                  value = {varValue}; &delta; = {varUncertainty}\n                </>\n              }\n              onDelete={handleDelete(index)}\n              avatar={<Avatar>{varName}</Avatar>}\n              style={{ marginRight: \"2px\" }}\n            />\n          ))}\n        </div>\n      </form>\n\n      <form>\n        <h2>Function</h2>\n        <TextField\n          error={funcValid ? false : true}\n          id=\"standard-basic\"\n          label=\"Function Expression\"\n          defaultValue=\"x^2\"\n          onChange={handleFunctionValidate}\n        />\n        <br />\n        <small>\n          uses the math.js{\" \"}\n          <a href=\"https://mathjs.org/docs/expressions/syntax.html\">syntax</a>\n        </small>\n      </form>\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={evaluateUncertainty}>\n        Evaluate Uncertainty\n      </Button>\n      <br />\n      {uncertFunc ? (\n        <h3>\n          Uncertainty Function:{\" \"}\n          {`f(${mesurables.map(([name, _]) => name).join(\",\")}) = `}\n          {uncertFunc.toString()}\n        </h3>\n      ) : null}\n      {uncertFunc && funcInput ? (\n        <h3>Value: {funcInput.evaluate(mesurablesToObj(mesurables))}</h3>\n      ) : null}\n      {uncertFunc ? (\n        <h3>Uncertainty: {uncertFunc.evaluate(mesurablesToObj(mesurables))}</h3>\n      ) : null}\n      {uncertFunc && funcInput ? (\n        <h3>\n          Result: {funcInput.evaluate(mesurablesToObj(mesurables))}&plusmn;\n          {uncertFunc.evaluate(mesurablesToObj(mesurables))}\n        </h3>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}